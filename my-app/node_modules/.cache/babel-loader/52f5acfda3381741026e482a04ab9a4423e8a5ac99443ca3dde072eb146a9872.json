{"ast":null,"code":"var _jsxFileName = \"/Users/meghnagopalan/Desktop/mgopal7.github.io-peopleweave/my-app/src/DataPage.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { Container, Heading, Table, Tbody, Tr, Th, Td } from '@chakra-ui/react';\nimport Papa from 'papaparse';\nimport './DataPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DataPage() {\n  _s();\n  const [data, setData] = useState([]);\n  async function fetchData() {\n    const response = await fetch('/data.csv'); // assuming the file is in the public directory\n    const csvData = await response.text(); // read the CSV file as text\n    const parsedData = Papa.parse(csvData, {\n      header: true\n    }).data; // parse the CSV string into an array of objects\n    setData(parsedData);\n  }\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxW: \"container.lg\",\n    pt: 8,\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h1\",\n      mb: 4,\n      children: \"My Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), data && data.length > 0 ? /*#__PURE__*/_jsxDEV(Table, {\n      variant: \"simple\",\n      className: \"data-table\",\n      children: [/*#__PURE__*/_jsxDEV(Table, {\n        variant: \"simple\",\n        className: \"data-table\",\n        children: \"...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Tbody, {\n        children: [/*#__PURE__*/_jsxDEV(Tr, {\n          children: Object.keys(data[0]).map(header => /*#__PURE__*/_jsxDEV(Th, {\n            children: header\n          }, header, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this), data.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(Tr, {\n          children: Object.values(row).map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(Td, {\n            children: cell\n          }, cellIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 19\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(DataPage, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = DataPage;\nexport default DataPage;\nvar _c;\n$RefreshReg$(_c, \"DataPage\");","map":{"version":3,"names":["useState","useEffect","Container","Heading","Table","Tbody","Tr","Th","Td","Papa","jsxDEV","_jsxDEV","DataPage","_s","data","setData","fetchData","response","fetch","csvData","text","parsedData","parse","header","maxW","pt","children","as","mb","fileName","_jsxFileName","lineNumber","columnNumber","length","variant","className","Object","keys","map","row","rowIndex","values","cell","cellIndex","_c","$RefreshReg$"],"sources":["/Users/meghnagopalan/Desktop/mgopal7.github.io-peopleweave/my-app/src/DataPage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Container, Heading, Table, Tbody, Tr, Th, Td } from '@chakra-ui/react';\nimport Papa from 'papaparse';\nimport './DataPage.css';\n\n\nfunction DataPage() {\n  const [data, setData] = useState([]);\n\n  async function fetchData() {\n    const response = await fetch('/data.csv'); // assuming the file is in the public directory\n    const csvData = await response.text(); // read the CSV file as text\n    const parsedData = Papa.parse(csvData, { header: true }).data; // parse the CSV string into an array of objects\n    setData(parsedData);\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <Container maxW=\"container.lg\" pt={8}>\n      <Heading as=\"h1\" mb={4}>\n        My Data\n      </Heading>\n      {data && data.length > 0 ? (\n        <Table variant=\"simple\" className='data-table'>\n          <Table variant=\"simple\" className=\"data-table\">\n  ...\n</Table>\n\n          <Tbody>\n            <Tr>\n              {Object.keys(data[0]).map((header) => (\n                <Th key={header}>{header}</Th>\n              ))}\n            </Tr>\n            {data.map((row, rowIndex) => (\n              <Tr key={rowIndex}>\n                {Object.values(row).map((cell, cellIndex) => (\n                  <Td key={cellIndex}>{cell}</Td>\n                ))}\n              </Tr>\n            ))}\n          </Tbody>\n        </Table>\n      ) : (\n        <div>Loading...</div>\n      )}\n    </Container>\n  );\n}\n\nexport default DataPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}