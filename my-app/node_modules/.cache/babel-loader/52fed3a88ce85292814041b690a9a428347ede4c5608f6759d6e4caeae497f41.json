{"ast":null,"code":"var _jsxFileName = \"/Users/meghnagopalan/Desktop/mgopal7.github.io-peopleweave/my-app/src/DataPage.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { Container, Heading, Table, Tbody, Tr, Th, Td } from '@chakra-ui/react';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DataPage() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch('/Users/meghnagopalan/Desktop/mgopal7.github.io-peopleweave/my-app/data.csv');\n      const reader = response.body.getReader();\n      const result = await reader.read(); // read the entire stream\n      const decoder = new TextDecoder('utf-8');\n      const csvData = decoder.decode(result.value); // decode the result into a string\n      const parsedData = Papa.parse(csvData, {\n        header: true\n      }).data; // parse the CSV string into an array of objects\n      setData(parsedData);\n    }\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxW: \"container.lg\",\n    pt: 8,\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h1\",\n      mb: 4,\n      children: \"My Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      variant: \"simple\",\n      children: /*#__PURE__*/_jsxDEV(Tbody, {\n        children: [/*#__PURE__*/_jsxDEV(Tr, {\n          children: Object.keys(data[0]).map(header => /*#__PURE__*/_jsxDEV(Th, {\n            children: header\n          }, header, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), data.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(Tr, {\n          children: Object.values(row).map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(Td, {\n            children: cell\n          }, cellIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(DataPage, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = DataPage;\nexport default DataPage;\nvar _c;\n$RefreshReg$(_c, \"DataPage\");","map":{"version":3,"names":["useState","useEffect","Container","Heading","Table","Tbody","Tr","Th","Td","Papa","jsxDEV","_jsxDEV","DataPage","_s","data","setData","fetchData","response","fetch","reader","body","getReader","result","read","decoder","TextDecoder","csvData","decode","value","parsedData","parse","header","maxW","pt","children","as","mb","fileName","_jsxFileName","lineNumber","columnNumber","variant","Object","keys","map","row","rowIndex","values","cell","cellIndex","_c","$RefreshReg$"],"sources":["/Users/meghnagopalan/Desktop/mgopal7.github.io-peopleweave/my-app/src/DataPage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Container, Heading, Table, Tbody, Tr, Th, Td } from '@chakra-ui/react';\nimport Papa from 'papaparse';\n\nfunction DataPage() {\nconst [data, setData] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch('/Users/meghnagopalan/Desktop/mgopal7.github.io-peopleweave/my-app/data.csv');\n      const reader = response.body.getReader();\n      const result = await reader.read(); // read the entire stream\n      const decoder = new TextDecoder('utf-8');\n      const csvData = decoder.decode(result.value); // decode the result into a string\n      const parsedData = Papa.parse(csvData, { header: true }).data; // parse the CSV string into an array of objects\n      setData(parsedData);\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <Container maxW=\"container.lg\" pt={8}>\n      <Heading as=\"h1\" mb={4}>\n        My Data\n      </Heading>\n      <Table variant=\"simple\">\n        <Tbody>\n          <Tr>\n            {Object.keys(data[0]).map((header) => (\n              <Th key={header}>{header}</Th>\n            ))}\n          </Tr>\n          {data.map((row, rowIndex) => (\n            <Tr key={rowIndex}>\n              {Object.values(row).map((cell, cellIndex) => (\n                <Td key={cellIndex}>{cell}</Td>\n              ))}\n            </Tr>\n          ))}\n        </Tbody>\n      </Table>\n    </Container>\n  );\n}\n\nexport default DataPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}